Приложение 1. Текст программных модулей                                   
Общий модуль «Общий Срв»  

Функция СоздатьОписаниеТипов(НазваниеТипа, Длина = "", Точность = "") Экспорт
	мас = Новый Массив;
	мас.Добавить(Тип(НазваниеТипа));
	Если Длина <> "" Тогда
		Если Точность = "" Тогда
			КвалифСтроки = Новый КвалификаторыСтроки(Длина, ДопустимаяДлина.Переменная);
		Иначе
			КвалифЧисла  = новый КвалификаторыЧисла(Длина, Точность, ДопустимыйЗнак.Любой);
		КонецЕсли;
	КонецЕсли;	
	Возврат Новый ОписаниеТипов(мас, КвалифСтроки, КвалифЧисла);
КонецФункции

Функция ПолучитьОсновнойТипЦен() Экспорт
	Возврат Константы.ОсновнойТипЦен.Получить();
КонецФункции	

Функция ПолучитьОсновнойТипСкидки() Экспорт
	
	Возврат Константы.ОсновнойТипСкидок.Получить();
КонецФункции	

// для одной строки документов при расчете в ней цены и суммы
Процедура РассчитатьСуммуСтроки(Дата, Номенклатура, Количество, Коэфф, ТипЦен, Скидка=0, Цена, ЦенаСоСкидкой=0, Сумма, СуммаСкидки=0) Экспорт
	
	Цена 		    = ПолучитьЦену(Дата, Номенклатура, ТипЦен);
	ЦенаСоСкидкой   = Цена - ((Цена*Скидка)/100);
 	Сумма 			= ЦенаСоСкидкой * Количество*Коэфф;
	СуммаСкидки		= Цена*Количество*Коэфф - ЦенаСоСкидкой*Количество*Коэфф;
КонецПроцедуры

// ПО КОНТРАГЕНТАМ
// получить ответсвенного сотрудника для контрагента
Функция ПолучитьОтветсвенного(КонтрагентСсылка) Экспорт
	
	Если Не КонтрагентСсылка.Пустая()  Тогда
		Возврат КонтрагентСсылка.Отвественный;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

// получить основной договор контрагента
Функция ПолучитьОсновнойДоговор(ДляКонтрагента, НаДату, ТипЦен=0, ТипСкидки=0, Скидка=0) Экспорт
	
	глПустаяДата = Дата(01,01,0001,00,00,00);
	Договор = Неопределено;

	Если НаДату = глПустаяДата Тогда	// если дата еще не известна - то берем на текущую дату 
		НаДату = ТекущаяДата();
	КонецЕсли;	
	// запросом выбираем все договора этого контрагента с признаком Основной и действующие по дате
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Договора.Ссылка			 		КАК Договор,
	|	Договора.Владелец		 		КАК Владелец,	
	|	Договора.Основной		 		КАК Основной,
	|	Договора.ДатаНачалаДействия		КАК ДатаНачалаДействия,	
	|	Договора.ДатаОкончанияДействия	КАК ДатаОкончанияДействия		
	|ИЗ
	|	Справочник.Договора КАК Договора
	|	ГДЕ Владелец = &ДляКонтрагента И
	|   Основной = ИСТИНА И
	|	ДатаНачалаДействия    <= &НаДату 
//	|	ДатаОкончанияДействия >= &НаДату	
	|";
	
	Запрос.УстановитьПараметр("ДляКонтрагента", ДляКонтрагента);
	Запрос.УстановитьПараметр("НаДату", НаДату);	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл   // если в выборке - несколько - то выбираем первый попавшийся	
		Договор = Выборка.Договор;
		Прервать;
	КонецЦикла;
	
	Если Договор = Неопределено Тогда 
		ТипЦен    = Константы.ОсновнойТипЦен.Получить();		// по умолчанию
		ТипСкидки = Константы.ОсновнойТипСкидок.Получить();	    // по умолчанию			
	Иначе	
		ТипЦен    = Договор.ТипЦен;		// из договора
		ТипСкидки = Договор.ТипСкидки;	// из договора
	КонецЕсли;	
	Скидка = СкидкаПоТипуСкидок(НаДату, ТипСкидки, ДляКонтрагента);  // значение скидки
	
	Возврат Договор;
	
КонецФункции	

// получить основной банковский счет контрагента/организации
Функция ПолучитьОсновнойСчет(ДляКонтрагента) Экспорт
	
	// запросом выбираем все договора этого контрагента с признаком Основной и действующие по дате
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Счета.Ссылка			 	КАК Счет,
	|	Счета.Владелец		 		КАК Владелец,	
	|	Счета.Основной		 		КАК Основной
	|ИЗ
	|	Справочник.БанковскиеСчета КАК Счета
	|	ГДЕ Владелец = &ДляКонтрагента И
	|   Основной = ИСТИНА
	|";
	
	Запрос.УстановитьПараметр("ДляКонтрагента", ДляКонтрагента);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл   // если в выборке - несколько - то выбираем первый попавшийся	
		Возврат Выборка.Счет;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	


// получить тип цен из договора
Функция ПолучитьТипЦенИзДоговора(ДоговорСсылка) Экспорт
	
	Если Не ДоговорСсылка.Пустая()  Тогда
		Возврат ДоговорСсылка.ТипЦен;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

// получить тип скидки из договора
Функция ПолучитьТипСкидкиИзДоговора(ДоговорСсылка) Экспорт
	
	Если Не ДоговорСсылка.Пустая()  Тогда
		Возврат ДоговорСсылка.ТипСкидки;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

// рассчитать значение скидки (в %) по типу скидки (постоянная)  и объему продаж контрагента (накопительная)
Функция СкидкаПоТипуСкидок(НаДату, ТипСкидки, Контрагент) Экспорт
	
	Если ТипСкидки.Пустая() Тогда
		Возврат 0;
	КонецЕсли;
	Скидка = ТипСкидки.ПостояннаяСкидка;	// как минимум есть постоянная
	Если Не ТипСкидки.НакопительнаяСкидкаЕсть Тогда	// если накопительной нет - то конец
		Возврат Скидка;
	КонецЕсли;
	Если ТипСкидки.Условия.Количество() = 0 Тогда	// если условия накопительной не заданы - то конец
		Возврат Скидка;
	КонецЕсли;	
	СуммаПродаж = ПолучитьСуммуПродаж(НаДату, ТипСкидки.ДнейНакопления, Контрагент);	// получить сумму продаж контрагента за период
	ТЗ = ТипСкидки.Условия.Выгрузить();
	ТЗ.Сортировать("Сумма");
	СкидкаНакопительная = 0;
	Для Каждого Строка Из ТЗ Цикл // найти ,в какую строку условий попадает сумма продаж
		Если СуммаПродаж >= Строка.Сумма Тогда
			СкидкаНакопительная = Строка.Процент;
		КонецЕсли;
	КонецЦикла;	
	Возврат Скидка + СкидкаНакопительная;
	
КонецФункции	

// рассчитать суммму продаж по контрагенту за период
Функция ПолучитьСуммуПродаж(ДатаОкончания, ДнейСчитать, ПоКонтрагенту)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПродажиОбороты.Контрагент	КАК Контрагент,
	|	ПродажиОбороты.СуммаОборот
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(&Начало, &Окончание) КАК ПродажиОбороты
	| ГДЕ Контрагент = &ПоКонтрагенту
	| СГРУППИРОВАТЬ ПО          
	| ПродажиОбороты.Контрагент,
	| ПродажиОбороты.СуммаОборот
	|";
	
	Запрос.УстановитьПараметр("ПоКонтрагенту", ПоКонтрагенту);
	Запрос.УстановитьПараметр("Начало",    НачалоДня(ДобавитьМесяц(ДатаОкончания,-(ДнейСчитать/30))) );
	Запрос.УстановитьПараметр("Окончание", КонецДня(ДатаОкончания));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл   
		Возврат Выборка.СуммаОборот;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции	

// ПО НОМЕНКЛАТУРЕ
Функция ПолучитьОсновнуюЕдиницуОтгрузкиНоменклатуры(НоменклатураСсылка) Экспорт
	
	Если Не НоменклатураСсылка.Пустая()  Тогда
		Возврат НоменклатураСсылка.ОсновнаяЕдиницаОтгрузки;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции	

Функция ПолучитьКоэффициент(ЕдИзмеренияСсылка) Экспорт
	
	Если Не ЕдИзмеренияСсылка.Пустая()  Тогда
		Возврат ЕдИзмеренияСсылка.Коэффициент;
	КонецЕсли;
	Возврат 0;
	
КонецФункции	

// получить цену номенклатуры
Функция ПолучитьЦену(НаДату, ВыбНоменклатура, ВыбТипЦен) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	Цены.Номенклатура    КАК Номенклатура,
	 |	Цены.ТипЦен  		 КАК ТипЦен,
	 |	Цены.Цена	  		 КАК Цена	 
	 |ИЗ
	 |	РегистрСведений.Цены.СрезПоследних(&ВыбДата) КАК Цены
	 |ГДЕ
	 |	ТипЦен 		 = &ВыбТипЦен И
	 |	Номенклатура = &ВыбНоменклатура
	 |
	 |";
	Запрос.УстановитьПараметр("ВыбНоменклатура", ВыбНоменклатура);
	Запрос.УстановитьПараметр("ВыбТипЦен", ВыбТипЦен);	
	Запрос.УстановитьПараметр("ВыбДата", НаДату);
	
	Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл        
		Возврат Выборка.Цена;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции	

// заполнить остатки номенклатуры
// в ТЗНоменклатура передается список запрашиваемой номенклатуры
// в ней же заполняется столбец "Количество" 
Процедура ПолучитьОстаткиНоменклатуры(НаДату, ВыбФирма, ВыбСклад, ТЗНоменклатура) Экспорт
	
	СЗНоменклатура = Новый СписокЗначений;
	Для Каждого ТекНоменклатура Из ТЗНоменклатура Цикл
		СЗНоменклатура.Добавить(ТекНоменклатура.Номенклатура);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	Остатки.Номенклатура     КАК Номенклатура,
	 |	Остатки.Фирма	  		 КАК Фирма,
	 |	Остатки.Склад	  		 КАК Склад,
	 |	Остатки.КоличествоОстаток 		 КАК Количество	 	 
	 |ИЗ
	 |	РегистрНакопления.Остатки.Остатки(&НаДату) КАК Остатки
	 |ГДЕ
	 |	Номенклатура В (&СЗНоменклатура) И
	 |	Фирма = &ВыбФирма И
	 |	Склад = &ВыбСклад	 
	 |
	 |";
	Запрос.УстановитьПараметр("СЗНоменклатура", СЗНоменклатура);
	Запрос.УстановитьПараметр("ВыбФирма", ВыбФирма);	
	Запрос.УстановитьПараметр("ВыбСклад", ВыбСклад);
	Запрос.УстановитьПараметр("НаДату", НаДату);	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТЗ = ТЗНоменклатура.Найти(Выборка.Номенклатура, "Номенклатура");
		Если  СтрокаТЗ <> Неопределено Тогда
			СтрокаТЗ.Количество = Выборка.Количество;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Справочник «Контрагенты»

Процедура ПриУстановкеНовогоКода(СтандартнаяОбработка, Префикс)
	Префикс = Обмен.ПолучитьПрефиксНомера();
КонецПроцедуры	


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	// ввод на основании адреса доставки контрагента-основания
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Контрагенты") Тогда
			// это создается адрес доставки для головного контрагента-основания
		ЮрФизЛицо 			= Перечисления.ЮрФизЛицо.АдресДоставки;
		ГоловнойКонтрагент  = ДанныеЗаполнения.Ссылка;	
		Родитель 			= Константы.ПапкаАдресовДоставки.Получить();
			// некоторые реквизиты берем из головного контрагента
		Наименование 		= ДанныеЗаполнения.Наименование;
		НаименованиеПолное  = ДанныеЗаполнения.НаименованиеПолное;
		Категория 			= ДанныеЗаполнения.Категория;
		Отвественный		= ДанныеЗаполнения.Отвественный;
		ЮрАдрес				= ДанныеЗаполнения.ЮрАдрес;
		ФактАдрес 			= ДанныеЗаполнения.ФактАдрес;
		ИНН					= ДанныеЗаполнения.ИНН;
		КПП 				= ДанныеЗаполнения.КПП;
		ОКПО 				= ДанныеЗаполнения.ОКПО;
		
		// ?? надо
		ОГРН 						= ДанныеЗаполнения.ОГРН;
		ОКВЭД 						= ДанныеЗаполнения.ОКВЭД;
		СвидетельствоСерияНомер 	= ДанныеЗаполнения.СвидетельствоСерияНомер;
		СвидетельствоДатаВыдачи 	= ДанныеЗаполнения.СвидетельствоДатаВыдачи;
		СтранаРегистрации 			= ДанныеЗаполнения.СтранаРегистрации;		
		Фамилия 					= ДанныеЗаполнения.Фамилия;				
		Имя 						= ДанныеЗаполнения.Имя;				
		Отчество 					= ДанныеЗаполнения.Отчество;						
		ДокументУдостоверяющийЛичность = ДанныеЗаполнения.ДокументУдостоверяющийЛичность;								
		ДатаРождения 				= ДанныеЗаполнения.ДатаРождения;								
		МестоРождения 				= ДанныеЗаполнения.МестоРождения;								
		ПФР			 				= ДанныеЗаполнения.ПФР;										
		Комментарий 				= ДанныеЗаполнения.Комментарий;										
		
				// контакты берем из головного контрагента
		Для Каждого ТекСтрокаТЧКонтакты Из ДанныеЗаполнения.ТЧКонтакты Цикл
			НоваяСтрока = ТЧКонтакты.Добавить();
			НоваяСтрока.Комментарий = ТекСтрокаТЧКонтакты.Комментарий;
			НоваяСтрока.Контакт = ТекСтрокаТЧКонтакты.Контакт;
			НоваяСтрока.Основной = ТекСтрокаТЧКонтакты.Основной;
			НоваяСтрока.ТипКонтакта = ТекСтрокаТЧКонтакты.ТипКонтакта;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Документ «Заявка»

Функция ПриПроведении()
	
	Если Фирма.Пустая() Тогда
		Сообщить("Зполните организацию");
		Возврат Ложь;
	КонецЕсли;	
	Если Контрагент.Пустая() Тогда
		Сообщить("Зполните контрагента");
		Возврат Ложь;
	КонецЕсли;	
		
	Если Номенклатура.Количество() = 0 Тогда
		Сообщить("Зполните список товаров");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если Не ПриПроведении() Тогда // проверить возможность проведения
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
		
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание, Значение)
	
	// Если вводится новый из интерфейса
	Если Основание = Неопределено Тогда	
		Фирма 		= Константы.ОсновнаяФирма.Получить();           
		Контрагент 	= Константы.ОсновнойКонтрагент.Получить();
		Сотрудник	= Контрагент.Отвественный;						// ответсвенный сотрудник		
		Договор		= ОбщийСрв.ПолучитьОсновнойДоговор(Контрагент, Дата, ТипЦен, ТипСкидки, Скидка); // основной договор, цены, скидки
	КонецЕсли;	
	
	// Если вводится на основании документа Задание
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Задание") Тогда 
		Фирма 		= Основание.Фирма;           		
		Контрагент 	= Основание.Контрагент;			// основание - это контрагент
		Сотрудник	= Контрагент.Отвественный;      // из контрагента
		Договор		= ОбщийСрв.ПолучитьОсновнойДоговор(Контрагент, Дата, ТипЦен, ТипСкидки, Скидка); // основной договор, цены, скидки
	КонецЕсли;
	
	// Если вводится на основании Контрагента
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.Контрагенты") Тогда 
		Фирма 		= Константы.ОсновнаяФирма.Получить();  // по умолчанию         
		Склад 		= Константы.ОсновнойСклад.Получить();  // по умолчанию        	
		Контрагент 	= Основание;					// основание - это контрагент
		Сотрудник	= Контрагент.Отвественный;      // из контрагента
		Договор		= ОбщийСрв.ПолучитьОсновнойДоговор(Контрагент, Дата, ТипЦен, ТипСкидки, Скидка); // основной договор, цены, скидки
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("Структура") Тогда //если вводлится новый из списка с установленным отбором
		// то данные заполняются автоматически из отбора "Заполнять из данных заполнения" 
	КонецЕсли	
		
КонецПроцедуры

Процедура ПередЗаписью()
	СуммаДокумента = Номенклатура.Итог("Сумма");
КонецПроцедуры	


// изменился контрагент - изменить договор, тип цен, тип скидки, скидку и пересчитать цены
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Объект.Сотрудник = ОбщийСрв.ПолучитьОтветсвенного(Объект.Контрагент);
	Объект.Договор = ОбщийСрв.ПолучитьОсновнойДоговор(Объект.Контрагент, Объект.Дата);
	ДоговорПриИзменении(Элемент);
КонецПроцедуры

// изменился договор - изменить тип цен, тип скидки, скидку и пересчитаь цену 
&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	Если Не Объект.Договор.Пустая() Тогда
		Объект.ТипЦен 	 = ОбщийСрв.ПолучитьТипЦенИзДоговора(Объект.Договор);
		Объект.ТипСкидки = ОбщийСрв.ПолучитьТипСкидкиИзДоговора(Объект.Договор);
	Иначе
		Объект.ТипЦен 	 = ОбщийСрв.ПолучитьОсновнойТипЦен();
		Объект.ТипСкидки = ОбщийСрв.ПолучитьОсновнойТипСкидки();
	КонецЕсли;
	Объект.Скидка 	 = ОбщийСрв.СкидкаПоТипуСкидок(Объект.Дата, Объект.ТипСкидки, Объект.Контрагент);
	ПересчитатьЦены();
	
КонецПроцедуры

// изхменился тип цен - персчитать цены (скидка не изменилась)
&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)
	
	ПересчитатьЦены();
КонецПроцедуры

// изменился тип скидки - персчитать скидку и пересчитать цены
&НаКлиенте
Процедура ТипСкидкиПриИзменении(Элемент)
	
	Объект.Скидка 	 = ОбщийСрв.СкидкаПоТипуСкидок(Объект.Дата, Объект.ТипСкидки, Объект.Контрагент);
	ПересчитатьЦены();
КонецПроцедуры

// изменилась скидка вручную - персчитать цены 
&НаКлиенте
Процедура СкидкаПриИзменении(Элемент)
	
	ПересчитатьЦены();
КонецПроцедуры

Процедура ПересчитатьЦены()
	
	Для Каждого ТекНоменклатура Из Объект.Номенклатура Цикл
		ОбщийСрв.РассчитатьСуммуСтроки(Объект.Дата, ТекНоменклатура.Номенклатура,
							   	 	 	 			ТекНоменклатура.Количество, 
													ТекНоменклатура.Коэфф, 												
										 			Объект.ТипЦен,
								  		 			Объект.Скидка,
								         			ТекНоменклатура.Цена,
								         			ТекНоменклатура.ЦенаСкидка, 
								         			ТекНоменклатура.Сумма,
								         			ТекНоменклатура.СуммаСкидки);
	КонецЦикла;									  
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНоменклатураПриИзменении(Элемент)
	
	ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Количество	= 1;		
	ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Коэфф        = 1;
	ОсновнаяЕдиницаОтгрузки = ОбщийСрв.ПолучитьОсновнуюЕдиницуОтгрузкиНоменклатуры(ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Номенклатура);
	Если Не ОсновнаяЕдиницаОтгрузки.Пустая() Тогда
		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.ЕдИзмерения = ОсновнаяЕдиницаОтгрузки;
		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Коэфф       = ОбщийСрв.ПолучитьКоэффициент(ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.ЕдИзмерения);
	КонецЕсли;	
	
	ОбщийСрв.РассчитатьСуммуСтроки(Объект.Дата, ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Номенклатура,
							   	 	 	 		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Количество, 
												ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Коэфф, 												
										 		Объект.ТипЦен,
								  		 		Объект.Скидка,
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Цена,
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.ЦенаСкидка, 
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Сумма,
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.СуммаСкидки);

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураКоличествоПриИзменении(Элемент)
	
	ОбщийСрв.РассчитатьСуммуСтроки(Объект.Дата, ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Номенклатура,
							   	 	 	 		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Количество, 
												ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Коэфф, 												
										 		Объект.ТипЦен,
								  		 		Объект.Скидка,
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Цена,
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.ЦенаСкидка, 
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Сумма,
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.СуммаСкидки);

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураЕдИзмеренияПриИзменении(Элемент)
	
	ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Коэфф = ОбщийСрв.ПолучитьКоэффициент(ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.ЕдИзмерения);
	
	ОбщийСрв.РассчитатьСуммуСтроки(Объект.Дата, ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Номенклатура,
							   	 	 	 		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Количество, 
												ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Коэфф, 												
										 		Объект.ТипЦен,
								  		 		Объект.Скидка,
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Цена,
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.ЦенаСкидка, 
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Сумма,
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.СуммаСкидки);
	
КонецПроцедуры

Документ «Реализация»
Функция ПриПроведении()
	
	Если Фирма.Пустая() Тогда
		Сообщить("Зполните организацию");
		Возврат Ложь;
	КонецЕсли;	
	Если Контрагент.Пустая() Тогда
		Сообщить("Зполните контрагента");
		Возврат Ложь;
	КонецЕсли;	
	Если Склад.Пустая() Тогда
		Сообщить("Зполните склад");
		Возврат Ложь;
	КонецЕсли;	
	
	Если Номенклатура.Количество() = 0 Тогда
		Сообщить("Зполните список товаров");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

Функция ПроверитьОстатки()
	
	// если в таб части несколько строк с одной и той же номенклатурой/партией, то "простая" проверка не 
	// будет правильно проверять остатки. Необходимо свернуть одинаковую номенклатуру/партии
	
	ТЗОстатки = Новый ТаблицаЗначений;
	ТипНоменклатуура = ОбщийСрв.СоздатьОписаниеТипов("СправочникСсылка.Номенклатура");
	ТЗОстатки.Колонки.Добавить("Номенклатура", ТипНоменклатуура);
	ТипКоличество = ОбщийСрв.СоздатьОписаниеТипов("Число",15,2);
	ТЗОстатки.Колонки.Добавить("Количество", ТипКоличество);

	Для Каждого ТекСтрокаНоменклатура Из Номенклатура Цикл
		НоваяСтрока = ТЗОстатки.Добавить();
		НоваяСтрока.Номенклатура = ТекСтрокаНоменклатура.Номенклатура;
		НоваяСтрока.Количество	 = 0;
	КонецЦикла;
	ТЗОстатки.Свернуть("Номенклатура", "Количество");
	ОбщийСрв.ПолучитьОстаткиНоменклатуры(Дата, Фирма, Склад, ТЗОстатки); // остстки запросом 
	
	ТЗЗапрашиваемаяНоменклатура = Новый ТаблицаЗначений;
	ТЗЗапрашиваемаяНоменклатура.Колонки.Добавить("Номенклатура", ТипНоменклатуура);	
	ТЗЗапрашиваемаяНоменклатура.Колонки.Добавить("Количество",   ТипКоличество);
	Для Каждого ТекСтрокаНоменклатура Из Номенклатура Цикл
		НоваяСтрока = ТЗЗапрашиваемаяНоменклатура.Добавить();
		НоваяСтрока.Номенклатура = ТекСтрокаНоменклатура.Номенклатура;
		НоваяСтрока.Количество	 = ТекСтрокаНоменклатура.Количество*ТекСтрокаНоменклатура.Коэфф;
	КонецЦикла;		
	ТЗЗапрашиваемаяНоменклатура.Свернуть("Номенклатура", "Количество");
	
	Для Каждого ТекЗапрашиваемыйОстаток Из ТЗЗапрашиваемаяНоменклатура Цикл
		Остаток = ТЗОстатки.Найти(ТекЗапрашиваемыйОстаток.Номенклатура, "Номенклатура");
		Если Остаток = Неопределено Тогда
			Сообщить("По номенклатуре " + ТекЗапрашиваемыйОстаток.Номенклатура + " запрашиваемое количество меньше имеющегося остатка");
			Возврат Ложь;
		КонецЕсли;
		Если Остаток.Количество < ТекЗапрашиваемыйОстаток.Количество Тогда
			Сообщить("По номенклатуре " + ТекЗапрашиваемыйОстаток.Номенклатура + " запрашиваемое количество меньше имеющегося остатка");
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Истина
КонецФункции	
	
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если Не ПриПроведении() Тогда // проверить возможность проведения
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Если Склад.Контроль Тогда
		Если Не ПроверитьОстатки() Тогда // контроль остатков
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	// регистр остатков Остатки 
	Для Каждого ТекСтрокаНоменклатура Из Номенклатура Цикл
		Движение 			 = Движения.Остатки.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период 	 = Дата;
		Движение.Фирма 		 = Фирма;
		Движение.Склад 		 = Склад;
		Движение.КодОперации = КодОперации;		
		Движение.Номенклатура = ТекСтрокаНоменклатура.Номенклатура;
		Движение.Партия		  = ТекСтрокаНоменклатура.Партия;		
		Движение.Количество   = ТекСтрокаНоменклатура.Количество*ТекСтрокаНоменклатура.Коэфф;
	КонецЦикла;
		
	// регистр остатков Взаиморасчеты 
	Если Счет.Пустая() Тогда // если в документе указан счет-касса	
		Движение = Движения.Взаиморасчеты.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период 		= Дата;		
		Движение.Фирма 			= Фирма;
		Движение.Контрагент 	= Контрагент;
		Движение.Сделка 		= ЭтотОбъект.Ссылка;
		Движение.Сумма 			= Номенклатура.Итог("Сумма");
	КонецЕсли;
	
	// регистр остатков Деньги
	Если Не Счет.Пустая() Тогда // если в документе указан счет-касса
		Движение = Движения.Деньги.Добавить();
		Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
		Движение.Период 		= Дата;		
		Движение.Фирма 			= Фирма;
		Движение.Счет 			= Счет;		
		Движение.КодОперации	= КодОперации;		
		Движение.Сумма 			= Номенклатура.Итог("Сумма");
	КонецЕсли;	


	// регистр оборотов Продажи 
	Для Каждого ТекСтрокаНоменклатура Из Номенклатура Цикл
		Движение = Движения.Продажи.Добавить();
		Движение.Период 			 = Дата;
		Движение.Фирма				 = Фирма;
		Движение.Контрагент 		 = Контрагент;
		Движение.Сотрудник 			 = Сотрудник;
		Движение.КодОперации 		 = КодОперации;
		Движение.Номенклатура 		 = ТекСтрокаНоменклатура.Номенклатура;		
		Движение.Количество			 = ТекСтрокаНоменклатура.Количество*ТекСтрокаНоменклатура.Коэфф;
		Движение.Сумма 				 = ТекСтрокаНоменклатура.Сумма;		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание, Значение)
	
	// Если вводится новый из интерфейса
	Если Основание = Неопределено Тогда	
		Фирма 		= Константы.ОсновнаяФирма.Получить();           
		Склад 		= Константы.ОсновнойСклад.Получить();          
		Контрагент 	= Константы.ОсновнойКонтрагент.Получить();
		Сотрудник	= Контрагент.Отвественный;						// ответсвенный сотрудник		
		Договор		= ОбщийСрв.ПолучитьОсновнойДоговор(Контрагент, Дата, ТипЦен, ТипСкидки, Скидка); // основной договор, цены, скидки
		Счет		= Константы.ОсновнойСчет.Получить();		
	КонецЕсли;	

	// Если вводится на основании Заявки
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Заявка") Тогда
		// Заполнение шапки
		ДокОснование = Основание;				// документ-основание
		Фирма 		 = Основание.Фирма;  		// из основания
		Склад 		 = Константы.ОсновнойСклад.Получить();    		
		Контрагент 	 = Основание.Контрагент;		// из основания
		Сотрудник	 = Контрагент.Отвественный;  // из контрагента
		Договор		 = ОбщийСрв.ПолучитьОсновнойДоговор(Контрагент, Дата, ТипЦен, ТипСкидки, Скидка); // основной договор, цены, скидки
		Счет		= Константы.ОсновнойСчет.Получить();		
		// табличная часть
		Для Каждого ТекСтрокаНоменклатура Из Основание.Номенклатура Цикл	// по всем записям табличной части
			НоваяСтрока = Номенклатура.Добавить();
			НоваяСтрока.Номенклатура = ТекСтрокаНоменклатура.Номенклатура;
			НоваяСтрока.Количество   = ТекСтрокаНоменклатура.Количество;
			НоваяСтрока.ЕдИзмерения  = ТекСтрокаНоменклатура.ЕдИзмерения;
			НоваяСтрока.Коэфф		 = ТекСтрокаНоменклатура.Коэфф;			
			
			ОбщийСрв.РассчитатьСуммуСтроки(ТекущаяДата(), ТекСтрокаНоменклатура.Номенклатура, 
			                                              ТекСтрокаНоменклатура.Количество, 
														  ТекСтрокаНоменклатура.Коэфф, 
														  ТипЦен, 
														  Скидка,
							 							  НоваяСтрока.Цена, 
														  НоваяСтрока.ЦенаСкидка, 
														  НоваяСтрока.Сумма, 
														  НоваяСтрока.СуммаСкидки);	
		КонецЦикла;
	КонецЕсли;
	
	// Если вводится на основании Контрагента
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.Контрагенты") Тогда 
		Фирма 		= Константы.ОсновнаяФирма.Получить();  // по умолчанию         
		Склад 		= Константы.ОсновнойСклад.Получить();  // по умолчанию        	
		Контрагент 	= Основание;					// основание - это контрагент
		Сотрудник	= Контрагент.Отвественный;      // из контрагента
		Договор		= ОбщийСрв.ПолучитьОсновнойДоговор(Контрагент, Дата, ТипЦен, ТипСкидки, Скидка); // основной договор, цены, скидки
		Счет		= Константы.ОсновнойСчет.Получить();		
	КонецЕсли;
	
	//Если вводится новый из списка с установленным отбором	
	Если ТипЗнч(Основание) = Тип("Структура") Тогда 
		// то данные заполняются автоматически из отбора "Заполнять из данных заполнения" 
	КонецЕсли	
		
КонецПроцедуры

Процедура ПередЗаписью()
	СуммаДокумента = Номенклатура.Итог("Сумма");
КонецПроцедуры	

// изменился контрагент - изменить договор, тип цен, тип скидки, скидку и пересчитать цены
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Объект.Сотрудник = ОбщийСрв.ПолучитьОтветсвенного(Объект.Контрагент);
	Объект.Договор = ОбщийСрв.ПолучитьОсновнойДоговор(Объект.Контрагент, Объект.Дата);
	//Если Не Объект.Договор = Неопределено Тогда
		ДоговорПриИзменении(Элемент);
	//КонецЕсли;	
КонецПроцедуры

// изменился договор - изменить тип цен, тип скидки, скидку и пересчитаь цену 
&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	Если Не Объект.Договор.Пустая() Тогда
		Объект.ТипЦен 	 = ОбщийСрв.ПолучитьТипЦенИзДоговора(Объект.Договор);
		Объект.ТипСкидки = ОбщийСрв.ПолучитьТипСкидкиИзДоговора(Объект.Договор);
	Иначе
		Объект.ТипЦен 	 = ОбщийСрв.ПолучитьОсновнойТипЦен();
		Объект.ТипСкидки = ОбщийСрв.ПолучитьОсновнойТипСкидки();
	КонецЕсли;
	Объект.Скидка 	 = ОбщийСрв.СкидкаПоТипуСкидок(Объект.Дата, Объект.ТипСкидки, Объект.Контрагент);
	ПересчитатьЦены();
	
КонецПроцедуры

// изхменился тип цен - персчитать цены (скидка не изменилась)
&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)
	
	ПересчитатьЦены();
КонецПроцедуры

// изменился тип скидки - персчитать скидку и пересчитать цены
&НаКлиенте
Процедура ТипСкидкиПриИзменении(Элемент)
	
	Объект.Скидка 	 = ОбщийСрв.СкидкаПоТипуСкидок(Объект.Дата, Объект.ТипСкидки, Объект.Контрагент);
	ПересчитатьЦены();
КонецПроцедуры

// изменилась скидка вручную - персчитать цены 
&НаКлиенте
Процедура СкидкаПриИзменении(Элемент)
	
	ПересчитатьЦены();
КонецПроцедуры

Процедура ПересчитатьЦены()
	
	Для Каждого ТекНоменклатура Из Объект.Номенклатура Цикл
		ОбщийСрв.РассчитатьСуммуСтроки(Объект.Дата, ТекНоменклатура.Номенклатура,
							   	 	 	 			ТекНоменклатура.Количество, 
													ТекНоменклатура.Коэфф, 												
										 			Объект.ТипЦен,
								  		 			Объект.Скидка,
								         			ТекНоменклатура.Цена,
								         			ТекНоменклатура.ЦенаСкидка, 
								         			ТекНоменклатура.Сумма,
								         			ТекНоменклатура.СуммаСкидки);
	КонецЦикла;									  
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНоменклатураПриИзменении(Элемент)
	
	ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Количество	= 1;		
	ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Коэфф        = 1;
	ОсновнаяЕдиницаОтгрузки = ОбщийСрв.ПолучитьОсновнуюЕдиницуОтгрузкиНоменклатуры(ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Номенклатура);
	Если Не ОсновнаяЕдиницаОтгрузки.Пустая() Тогда
		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.ЕдИзмерения = ОсновнаяЕдиницаОтгрузки;
		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Коэфф       = ОбщийСрв.ПолучитьКоэффициент(ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.ЕдИзмерения);
	КонецЕсли;	
	
	ОбщийСрв.РассчитатьСуммуСтроки(Объект.Дата, ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Номенклатура,
							   	 	 	 		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Количество, 
												ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Коэфф, 												
										 		Объект.ТипЦен,
								  		 		Объект.Скидка,
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Цена,
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.ЦенаСкидка, 
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Сумма,
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.СуммаСкидки);

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураКоличествоПриИзменении(Элемент)
	
	ОбщийСрв.РассчитатьСуммуСтроки(Объект.Дата, ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Номенклатура,
							   	 	 	 		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Количество, 
												ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Коэфф, 												
										 		Объект.ТипЦен,
								  		 		Объект.Скидка,
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Цена,
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.ЦенаСкидка, 
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Сумма,
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.СуммаСкидки);

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураЕдИзмеренияПриИзменении(Элемент)
	
	ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Коэфф = ОбщийСрв.ПолучитьКоэффициент(ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.ЕдИзмерения);
	
	ОбщийСрв.РассчитатьСуммуСтроки(Объект.Дата, ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Номенклатура,
							   	 	 	 		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Количество, 
												ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Коэфф, 												
										 		Объект.ТипЦен,
								  		 		Объект.Скидка,
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Цена,
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.ЦенаСкидка, 
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.Сумма,
								         		ЭтотОбъект.Элементы.Номенклатура.ТекущиеДанные.СуммаСкидки);
	
КонецПроцедуры


